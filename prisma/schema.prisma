// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Multi-tenancy: Tenant = Company
model Tenant {
  id           String   @id @default(cuid())
  name         String
  billingEmail String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  locals          Local[]
  memberships     Membership[]
  threads         Thread[]
  contacts        Contact[]
  cannedResponses CannedResponse[]
  slas            SLA[]
  auditLogs       AuditLog[]
  templates       Template[]
  channelSLAConfigs ChannelSLAConfig[]
  localSLAConfigs   LocalSLAConfig[]

  @@map("tenants")
}

// Local = Branch/Location
model Local {
  id       String  @id @default(cuid())
  tenantId String
  name     String
  address  String?
  timezone String  @default("America/Argentina/Cordoba")

  tenant   Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  channels Channel[]
  threads  Thread[]
  localSLAConfigs LocalSLAConfig[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tenantId])
  @@map("locals")
}

// Users
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String? // hashed
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  memberships      Membership[]
  assignedThreads  Thread[]
  sentMessages     Message[]
  auditLogs        AuditLog[]
  notifications    Notification[]
  accounts         Account[]
  sessions         Session[]

  @@map("users")
}

// NextAuth Account model
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// NextAuth Session model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// NextAuth VerificationToken model
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// User membership in tenants with roles
model Membership {
  id       String @id @default(cuid())
  userId   String
  tenantId String
  role     Role   @default(AGENT)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, tenantId])
  @@index([userId])
  @@index([tenantId])
  @@map("memberships")
}

enum Role {
  OWNER
  ADMIN
  AGENT
  VIEWER
}

// Social media channels connected to a local
model Channel {
  id          String        @id @default(cuid())
  localId     String
  type        ChannelType
  displayName String
  status      ChannelStatus @default(ACTIVE)
  meta        Json? // Store credentials, tokens, config per channel

  local    Local     @relation(fields: [localId], references: [id], onDelete: Cascade)
  threads  Thread[]
  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([localId])
  @@index([type])
  @@map("channels")
}

enum ChannelType {
  INSTAGRAM
  FACEBOOK
  WHATSAPP
  TIKTOK
  MOCK
}

enum ChannelStatus {
  ACTIVE
  INACTIVE
  ERROR
}

// Conversation thread
model Thread {
  id            String       @id @default(cuid())
  tenantId      String
  localId       String
  channelId     String
  externalId    String // External platform thread ID
  subject       String?
  assigneeId    String?
  status        ThreadStatus @default(OPEN)
  lastMessageAt DateTime     @default(now())

  tenant   Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  local    Local    @relation(fields: [localId], references: [id], onDelete: Cascade)
  channel  Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  assignee User?    @relation(fields: [assigneeId], references: [id], onDelete: SetNull)
  messages Message[]
  contact  Contact?  @relation(fields: [contactId], references: [id], onDelete: SetNull)
  contactId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([channelId, externalId])
  @@index([tenantId])
  @@index([localId])
  @@index([channelId])
  @@index([assigneeId])
  @@index([status])
  @@index([lastMessageAt])
  @@map("threads")
}

enum ThreadStatus {
  OPEN
  PENDING
  CLOSED
}

// Contact information
model Contact {
  id       String  @id @default(cuid())
  tenantId String
  name     String?
  handle   String // Username/handle on platform
  platform String // instagram, facebook, whatsapp, tiktok
  phone    String?
  email    String?
  notes    String? @db.Text

  tenant  Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  threads Thread[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([tenantId, platform, handle])
  @@index([tenantId])
  @@map("contacts")
}

// Individual messages
model Message {
  id           String           @id @default(cuid())
  threadId     String
  channelId    String
  direction    MessageDirection
  authorId     String? // User ID if outbound
  externalId   String? // External platform message ID
  body         String           @db.Text
  attachments  Json? // Array of attachment objects
  sentAt       DateTime         @default(now())
  deliveredAt  DateTime?
  readAt       DateTime?
  failedReason String?

  thread  Thread   @relation(fields: [threadId], references: [id], onDelete: Cascade)
  channel Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  author  User?    @relation(fields: [authorId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())

  @@index([threadId])
  @@index([channelId])
  @@index([sentAt])
  @@map("messages")
}

enum MessageDirection {
  INBOUND
  OUTBOUND
}

// Canned responses / Quick replies
model CannedResponse {
  id            String @id @default(cuid())
  tenantId      String
  title         String
  content       String @db.Text
  variablesJSON Json? // Variables like {{name}}, {{local}}

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tenantId])
  @@map("canned_responses")
}

// SLA configuration
model SLA {
  id                 String @id @default(cuid())
  tenantId           String
  name               String
  firstResponseMins  Int // Minutes for first response
  businessHoursJSON  Json? // Business hours configuration

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  channelSLAConfigs ChannelSLAConfig[]
  localSLAConfigs   LocalSLAConfig[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tenantId])
  @@map("slas")
}

// Audit log for tracking changes
model AuditLog {
  id         String  @id @default(cuid())
  tenantId   String
  actorId    String?
  action     String // e.g., "thread.assigned", "channel.connected"
  entity     String // e.g., "Thread", "Channel"
  entityId   String
  diffJSON   Json? // Changes made

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  actor  User?  @relation(fields: [actorId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())

  @@index([tenantId])
  @@index([entity, entityId])
  @@map("audit_logs")
}

// Message templates (e.g., WhatsApp approved templates)
model Template {
  id          String  @id @default(cuid())
  tenantId    String
  channelType String // instagram, facebook, whatsapp, tiktok
  name        String
  contentJSON Json // Template structure
  approvedTag String? // Approval status/tag

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tenantId])
  @@index([channelType])
  @@map("templates")
}

// In-app notifications
model Notification {
  id          String   @id @default(cuid())
  userId      String
  type        String // e.g., "new_message", "sla_warning"
  payloadJSON Json
  readAt      DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@index([userId])
  @@index([readAt])
  @@map("notifications")
}

// Channel SLA Configuration
model ChannelSLAConfig {
  id         String   @id @default(cuid())
  tenantId   String
  channelType String  // WHATSAPP, INSTAGRAM, TIKTOK, FACEBOOK, TWITTER, TELEGRAM
  slaId      String?
  
  tenant     Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  sla        SLA?   @relation(fields: [slaId], references: [id], onDelete: SetNull)
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([tenantId, channelType])
  @@index([tenantId])
  @@index([channelType])
  @@map("channel_sla_configs")
}

// Local SLA Configuration
model LocalSLAConfig {
  id       String   @id @default(cuid())
  tenantId String
  localId  String
  slaId    String?
  
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  local    Local  @relation(fields: [localId], references: [id], onDelete: Cascade)
  sla      SLA?   @relation(fields: [slaId], references: [id], onDelete: SetNull)
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([tenantId, localId])
  @@index([tenantId])
  @@index([localId])
  @@map("local_sla_configs")
}
